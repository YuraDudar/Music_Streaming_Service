version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v2.51.0 # Рекомендуется использовать конкретную версию
    container_name: prometheus
    # Монтирование конфигурационного файла и тома для данных
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yaml # Локальный файл в контейнер
      - prometheus_data:/prometheus                               # Именованный том для данных Prometheus
    # Команды для запуска Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Для перезагрузки конфигурации без перезапуска контейнера
    ports:
      - "9090:9090" # Проброс порта для доступа к UI Prometheus
    networks:
      - monitoring_network # Подключение к сети 'monitoring_network'
    restart: unless-stopped # Политика перезапуска

  grafana:
    image: grafana/grafana-oss:10.4.1 # Рекомендуется использовать конкретную версию
    container_name: grafana
    ports:
      - "3000:3000" # Проброс порта для доступа к UI Grafana
    volumes:
      - grafana_data:/var/lib/grafana # Именованный том для данных Grafana
      # Опционально: для автоматической настройки Data Sources и Dashboards
      # - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      # - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # !!! ВАЖНО: Смените этот пароль для продакшена !!!
      # - GF_INSTALL_PLUGINS= # Если нужны какие-либо плагины Grafana
    depends_on:
      - prometheus # Grafana запустится после Prometheus (не гарантирует готовность, но помогает с порядком)
    networks:
      - monitoring_network # Подключение к той же сети
    restart: unless-stopped
  # PostgreSQL
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: secret
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: music-service-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  # MinIO (S3 compatible)
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - app_network

  # ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "19000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - app_network

  # Zookeeper (для Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - app_network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
      - "9092:9092"
    networks:
      - app_network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

volumes:
  postgres_data:
  minio_data:
  clickhouse_data:
  redis_data:
  prometheus_data: {}
  grafana_data: {}

networks:
  app_network:
    driver: bridge
  monitoring_network:
    driver: bridge